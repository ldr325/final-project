import interfascia.*;

import g4p_controls.*;

import game2dai.*;
import game2dai.entities.*;
import game2dai.entityshapes.*;
import game2dai.entityshapes.ps.*;
import game2dai.fsm.*;
import game2dai.graph.*;
import game2dai.maths.*;
import game2dai.steering.*;
import game2dai.utils.*;

// Card setup \\

class Cards
{
  int show = 0; // 0 shows back of card
  PImage cardImage;
  int cardX = 0;
  int cardY = 0;
  int faceValue = 0;
  int myPoints = 0;
  
  String[] cardName = {
    "Unknown.png","ClubsA.jpg", "Clubs2.jpg", "Clubs3.jpg", "Clubs4.jpg", "Clubs5.jpg",
    "Clubs6.jpg", "Clubs7.jpg", "Clubs8.jpg", "Clubs9.jpg", "Clubs10.jpg",
    "ClubsJ.jpg", "ClubsQ.jpg","ClubsK.jpg", "DiamondA.jpg", "Diamond2.jpg",
    "Diamond3.jpg", "Diamond4.jpg","Diamond5.jpg", "Diamond6.jpg","Diamond7.jpg",
    "Diamond8.jpg", "Diamond9.jpg", "Diamond10.jpg", "DiamondJ.jpg","DiamondQ.jpg",
    "DiamondK.jpg", "HeartsA.jpg", "Hearts2.jpg","Hearts3.jpg","Hearts4.jpg", "Hearts5.jpg",
    "Hearts6.jpg","Hearts7.jpg","Hearts8.jpg","Hearts9.jpg","Hearts10.jpg","HeartsJ.jpg",
    "HeartsQ.jpg", "HeartsK.jpg", "SpadesA.jpg", "Spades2.jpg","Spades3.jpg","Spades4.jpg",
    "Spades5.jpg","Spades6.jpg","Spades7.jpg","Spades8.jpg","Spades9.jpg","Spades10.jpg",
    "SpadesJ.jpg","SpadesQ.jpg","SpadesK.jpg" //"Back.jpg"
  };
  
  //each set should have 13 and thus 1pt for each
  
  Cards(int x, int y, int fv, int mp)
  {
    cardX = x;
    cardY = y;
    faceValue = fv;
    myPoints = mp;
  }
  void display(){
    cardImage = loadImage(cardName[show]);
    image(cardImage, cardX,cardY);
  }
  
  void setX(int newX){
    cardX = newX;
    show = faceValue;
  }
  int getPoints(){
    return(myPoints);
  }
}


// Gameplay \\

PFont myFont;
PFont usrInput;
PFont title;
//int[] y;
int[] y = new int[50];
int[] fv = new int[50];
int[] points = new int[100];
int currentPoint;
int[] x = new int[50];
Cards[] myCard = new Cards[52];

int leftPoint, rightPoint;
int leftDeck, rightDeck;
int sSizeX, sSizeY, stage;
PImage startscreen;
String typing = "";


void setup()
{
  // Menu \\
  stage = 1;
  sSizeX = 1000;
  sSizeY = 1000;
  //size(sSizeX,sSizeY);
  startscreen = loadImage("R7mghNM.jpg");
  image(startscreen,0,0,sSizeX,sSizeY);
  title =createFont("Verdana",20,true);
  
  usrInput = createFont("Verdana",20); // user input
  
  //setup\\
  background(150,89);
  
  
  size(1000,1000);
  //fullScreen();
  fill(255,0,0);
  myFont = createFont("Verdana", 40,true);
  
  shuffle();
  shuffle();
  
  if (playerAmt == 2){
    int myY = 600;
    int p2y = 200;
    int myX1 =150;
    int p2X = 150;
    for(int i = 0;i<=52;i++){
      y[i] = myY;
      fv[i] = i+1;
      
      points[i] = currentPoint;
      currentPoint++;
      if(currentPoint >){
        currentPoint = 1;
      }
      if(i%2==0){
        x[i] = myX1;
        myY+=2;
        myX1+=2;
        p2X+=2;
      }else{
        x[i] = p2X;
      }
    }
  }
  
  for(int i = 0; i < 20; i++){
    myCard[i] = new Cards(x[i],y[i],fv[i],points[i]);
  }
}

int playerAmt;


void draw(){
  //stage =1;
  //int indent = 25;
  if(stage == 1){
    image(startscreen,0,0,sSizeX,sSizeY);
    textAlign(CENTER);
    textFont(title);
    text("Space War", 100,150);
    text("Click S to start",500,470);
    if (keyPressed){
      if(key == 's' || key == 'S')
      {
        stage = 2;
      }
    }
  }
  if (stage == 2){
    image(startscreen,0,0,sSizeX,sSizeY);
    textAlign(CENTER);
    textFont(usrInput);
    //fill(0);
    text("How many Players? (from 2 to 6 players)" + typing,500,150);
    if(keyPressed){
      if(key =='2'){
        stage = 3;
        playerAmt = 2;
      } else if(key == '3'){
        stage = 3;
        playerAmt = 3;
      } else if(key =='4'){
        stage = 3;
        playerAmt =4;
      }else if (key == '5'){
        stage =3;
        playerAmt =5;
      }else if(key =='6'){
        stage =3;
        playerAmt =6;
      }
    } 
  }
  if (stage == 3){
    image(startscreen,0,0,sSizeX,sSizeY);
    textAlign(CENTER);
    textFont(title);
    text("Players (More than 2, less than 6) split one full deck evenly." + "Each turn, players choose one card from their deck (“fleet”) to play." + 
    "Highest card wins the round, and the winning player collects all the cards." +
    "Ace beats all cards except 2, 2 is beaten by every other card but ace." +
    "First player to collect two fours-of-a-kind (“spaceship”) wins." +
    "If a player loses all their cards, they are eliminated." +
    "If two or more players play the same card, there is “war.” " +
    "Each player in the “war” finds three cards that they think could win the round and places them face down." +
    "Starting with whoever placed their three cards first, players choose one card from the three cards of the player clockwise to them to flip. This continues until each player has one card upright." +
    "The winning card takes three cards of their choosing. The remaining cards are then shuffled and redistributed to the other players." +
    "If a player gets one spaceship, they have the option to “lock” it by sacrificing one card above 7 or an ace.", 400,100);
    text("click any key to continue",100,100);
    if (keyPressed){
      stage =4;
    }
  }
  
  if (stage == 4){
    background(0);
    for(int i = 0; i<20; i++){
      myCard[i].display();
    }
    
    if(leftDeck >19)
    {
      if(leftPoint>rightPoint)
      {
        text("Left Wins",250,350);
      }else if(leftPoint<rightPoint)
      {
        text("right wins",250,350);
      }
      else{
        //war();
        text("tie",250,350);
      }
    }
  }
    
}

void war(){
  
  
  
  
  
}

void Deckset(){
  if (playerAmt == 2){
    


  }
}
    
    
void mouseClicked(){
  if(mouseX<400 && mouseX>200 && mouseY<500 && mouseY>400)
  {
    myCard[leftDeck].setX(190);
    myCard[rightDeck].setX(310);
    
    if(myCard[leftDeck].getPoints()>myCard[rightDeck].getPoints()){
      leftPoint++;
    } else if(myCard[leftDeck].getPoints()<myCard[rightDeck].getPoints()){
      rightPoint++;
    }
    
    leftDeck+=2;
    rightDeck+=2;
    }
  }

void shuffle(){
  int temp = 0;
  int tempPoint = 0;
  int rand = 0;
  for(int i = 0; i <20;i++){
    rand = int(random(0,20));
    temp = fv[i];
    tempPoint = points[i];
    fv[i] = fv[rand];
    points[i] = points[rand];
    fv[rand] = temp;
    points[rand] = tempPoint;
  }
}
    
